<div id="float-chatbox">
  <head>
    <style>
      body {
        font-family: Arial, Helvetica, sans-serif;
      }
      * {
        box-sizing: border-box;
      }
      .float-container {
        width: 50%;
        height: 100%;
        float: left;
        padding: 0px;
        margin: auto;
        /* height: 56px; */
      }
      /* Button used to open the chat form - fixed at the bottom of the page */
      #expand-button {
        background-color: #007bff;
        color: white;
        padding: 16px 20px;
        border: none;
        display: block;
        cursor: pointer;
        opacity: 0.8;
        position: fixed;
        bottom: 10px;
        right: 10px;
        width: 280px;
        font-weight: 400;
        border-radius: 0.25rem;
        border: 1px solid transparent;
        visibility: visible;
      }
      /* The popup chat - hidden by default */
      .chat-popup {
        display: block;
        bottom: 0;
        right: 0px;
        border: 1px solid rgba(0, 0, 0, 0.125);
        z-index: 9;
        border-radius: 0.25rem;
        background-color: white;
        visibility: hidden;
      }

      /* Add styles to the form container */
      .form-container {
        max-width: 400px;
        padding: 1.25rem;
        padding-top: 0px;
        background-color: white;
      }

      /* Full-width textarea */
      .form-container textarea {
        width: 100%;
        padding: 15px;
        margin: 5px 0 22px 0;
        border: none;
        background: #f1f1f1;
        resize: none;
        min-height: 10px;
      }

      /* When the textarea gets focus, do something */
      .form-container textarea:focus {
        background-color: #ddd;
        outline: none;
      }

      /* Set a style for the submit/send button */
      .form-container .btn {
        background-color: #4caf50;
        color: white;
        padding: 16px 20px;
        border: none;
        cursor: pointer;
        width: 100%;
        margin-bottom: 10px;
        opacity: 0.8;
      }

      /* Add a red background color to the cancel button */
      .form-container .cancel {
        background-color: red;
      }

      .form-container b {
        line-height: 2;
      }
      /* Add some hover effects to buttons */
      .form-container .btn:hover,
      #expand-button:hover {
        opacity: 1;
      }
      #float-chatbox {
        position: fixed;
        visibility: hidden;
        bottom: 0px;
        right: 0px;
        width: 350px;
        height: 590px;
        z-index: 9;
      }

      #chatbox-header {
        cursor: move;
        z-index: 10;
        background-color: #007bff !important;
        width: 348px;
        display: flex;
        margin-left: -1.25rem;
        border: 1px solid rgba(0, 0, 0, 0.125);
      }
      #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        overflow-y: auto;
        height: 100%;
        height: 200px;
      }
      #messages {
        border: 1px solid rgba(0, 0, 0, 0.125);
      }
      #messages li {
        position: relative;
        padding: 5px 10px;
        word-wrap: break-word;
        z-index: 9;
        min-height: 34px;
      }
      .message:hover {
        cursor: pointer;
        text-decoration: underline;
      }
      /* .message:nth-child(odd) {
        background: #eee;
      } */
      .reaction-display {
        display: none;
        font-weight: bold;
        font-size: 80%;
        list-style-type: none;
        width: 100%;
        overflow: auto;
        padding-left: 0;
      }
      .reaction-display li{
        float: left;
        padding: 5px !important;
      }
      .reaction-display li span {
        padding: 4px;
        margin: -3px;
        border-radius: 17px;
        color: white;
      }
      #users {
        color: black;
        display: none;
        list-style-type: none;
        position: absolute;
        margin: 0;
        padding: 0;
        overflow: hidden;
        overflow-y: auto;
        max-height: 100px;
        z-index: 11;
        background-color: white;
        border: 3px solid #f1f1f1;
        font-size: 100%;
        top: 40px;
        left: unset;
        right: 0;
        cursor: default;
      }
      .float-container:hover #users {
        display: block;
      }
      .overflow-container {
        position: relative;
      }
      #reaction-selector {
        background-color: white;
        display: none;
        top: unset;
        width: 100%;
        padding: auto;
        margin: auto;
      }
      #reaction-selector li {
        padding: auto;
        margin: auto;
        float: left;
        cursor: pointer;
      }
      #user-count {
        /* right: 10px;
        position: absolute; */
        float: right;
        /* margin-left: 10px; */
        text-decoration: underline;
      }
    </style>
  </head>
  <body onresize="checkOutOfBound()">
    <button id="expand-button" onclick="openChat()">
      Chat
    </button>
    <div class="chat-popup" id="chat-window">
      <form action="" class="form-container">
        <div id="chatbox-header" class="card-header text-white">
          <div class="float-container">
            <div style="font-size: 150%;">PrairieChat</div>
          </div>
          <div class="float-container">
            <div id="user-count">Holder</div>
            <ul id="users" class="dropdown-menu"></ul>
          </div>
        </div>
        <b style="text-align: left;">Chat History:</b>
        <ul id="messages" class="overflow-container"></ul>
        <b>Send New Message:</b>
        <textarea maxlength="500" placeholder="Type message.." id="msg" required></textarea>

        <button type="submit" class="btn" id="submit-button">Send</button>
        <button
          type="button"
          class="btn cancel"
          id="close-button"
          onclick="closeChat()"
        >
          Close
        </button>
      </form>
      <ul id="reaction-selector" class="dropdown-menu"></ul>
    </div>
    <script src="/javascripts/socket.io.js"></script>
    <script>
      var user_count = 0;
      var message_read = 0;
      var local_message_count = 0;
      var expand_button = document.getElementById("expand-button");
      var submit_button = document.getElementById("submit-button");
      var reaction_selector = document.getElementById("reaction-selector");
      var offline = true;
      var reactions_options = ["üëå", "üëç", "üëé", "üòü", "üòÇ", "üî•", "üéâ"];
      
      for (var i = 0; i < reactions_options.length; i++) {
        $("#reaction-selector").append($("<li class='reaction'>").text(reactions_options[i]));
      }

      // if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
      if (document.body.clientWidth < 640) {
        expand_button.style.left = "50%";
        expand_button.style.transform = "translate(-50%, 0)";
      }
      var socket;
      $(function () {
        var assessment_instance_id = <%= assessment_instance_id%>;
        var name = document.getElementById("navbarDropdown").text;
        socket = io("/chat", {query: "name="+ name + "&id=" + assessment_instance_id.toString()});

        socket.on("connect", function () {
          offline = false;
          // socket.emit("id", {name: name, id: assessment_instance_id});
          expand_button.style.backgroundColor = "#007bff";
          if (message_read == $("#messages li").length) {
            expand_button.style.backgroundColor = "#007bff";
            expand_button.innerText = "Chat (" + user_count + " Online)";
          }
          submit_button.style.backgroundColor = "#4caf50";
          submit_button.innerText = "Send";
        });

        $(".form-container").submit(function (e) {
          e.preventDefault(); // prevents page reloading
          socket.emit("send", $("#msg").val());
          $("#msg").val("");
          return false;
        });

        socket.on("boardcast", function (msg) {
          var full_msg = msg.username + ": " + msg.message;
          var div_id = msg.id.toString();
          $("#messages").append($("<div id=" + div_id + ">"));
          if (local_message_count % 2 == 0) {
            $("#" + div_id).append($("<li class=\"message\" style='background: #eee;' onclick='reactionSelector()'>").text(full_msg));
            $("#" + div_id).append($("<ul class=\"reaction-display\" style='background: #eee;'>").text(""));
          } else {
            $("#" + div_id).append($("<li class=\"message\" onclick='reactionSelector()'>").text(full_msg));
            $("#" + div_id).append($("<ul class=\"reaction-display\">").text(""));
          }
          local_message_count += 1;
          document.getElementById(div_id).scrollIntoView({behavior: "smooth"});
          var mode = expand_button.style.display;
          if (mode == "" || mode == "block") {
            expand_button.innerText = "You have "+ ($("#messages li").length - message_read) +" unread messages";
            expand_button.style.backgroundColor = "#E84A27";
          }
        });

        var message_reactions = {};
        socket.on("boardcast reaction", function (msg) {
          var id = msg.id;
          var reaction = msg.reaction;
          var target_message_div = document.getElementById(id.toString());
          var reaction_display;
          if (target_message_div != null) {
            reaction_display = target_message_div.getElementsByClassName("reaction-display")[0];
          } else {
            return;
          }
          if (!(id in message_reactions)) {
            message_reactions[id] = {};
            for (var i = 0; i < reactions_options.length; i++) {
              message_reactions[id][reactions_options[i]] = 0;
            }
          }
          message_reactions[id][reaction] += 1;
          var reaction_display_li = reaction_display.getElementsByClassName(reaction);
          if (reaction_display_li.length == 0) {
            var block = document.createElement("li");
            block.appendChild(document.createElement("span"));
            block.childNodes[0].innerText = reaction + " " + message_reactions[id][reaction];
            block.onclick = function() {reactionShortcut()}
            block.style.cursor = "pointer";
            block.className = reaction;
            reaction_display.appendChild(block);
          } else {
            reaction_display_li[0].childNodes[0].innerText = reaction + " " + message_reactions[id][reaction];
          }
          if (!(id in message_reactions_voted)) {
            message_reactions_voted[id] = {};
            for (var i = 0; i < reactions_options.length; i++) {
              message_reactions_voted[id][reactions_options[i]] = false;
            }
          }
          if (message_reactions_voted[id][reaction] == true) {
            reaction_display_li[0].childNodes[0].style.backgroundColor = "#007bff";
          } else {
            reaction_display_li[0].childNodes[0].style.backgroundColor = "#6c757d";
          }
          reaction_display.style.display = "block";
        });

        socket.on("boardcast reaction recall", function (msg) {
          var id = msg.id;
          var reaction = msg.reaction;
          var target_message_div = document.getElementById(id.toString());
          if (target_message_div != null) {
            reaction_display = target_message_div.getElementsByClassName("reaction-display")[0];
          } else {
            return;
          }
          message_reactions[id][reaction] -= 1;
          var reaction_display_li = reaction_display.getElementsByClassName(reaction);
          if (message_reactions[id][reaction] <= 0) {
            reaction_display_li[0].remove();
          } else {
            reaction_display_li[0].childNodes[0].innerText = reaction + " " + message_reactions[id][reaction];
          }
        });

        socket.on("update", function (update) {
          user_count = update.count;
          if (message_read == $("#messages li").length) {
            expand_button.style.backgroundColor = "#007bff";
            expand_button.innerText = "Chat (" + user_count + " Online)";
          }
          document.getElementById("user-count").innerText =
            "Online User: " + user_count;
          var array = update.name_list.split(",");
          document.getElementById("users").innerHTML = "";
          for (i = 0; i < array.length; i++) {
            $("#users").append($("<li>").text(array[i]));
          }
        });
        socket.on("disconnect", () => {
          offline = true;
          document.getElementById("user-count").innerText = "Offline";
          document.getElementById("users").innerHTML = "";
          expand_button.style.backgroundColor = "grey";
          expand_button.innerText = "Chat Offline";
          submit_button.style.backgroundColor = "grey";
          submit_button.innerText = "Message will be sent once the network is back on"
        });
      });

      $(function () {
        $("#msg").keypress(function (e) {
          if (e.which == 13 && !e.shiftKey) {
            $("#submit-button").click();
            e.preventDefault();
          }
        });
      });
      function openChat() {
        document.getElementById("float-chatbox").style.visibility = "visible";
        document.getElementById("chat-window").style.visibility = "visible";
        expand_button.style.visibility = "hidden";
      }

      function closeChat() {
        document.getElementById("float-chatbox").style.visibility = "hidden";
        document.getElementById("chat-window").style.visibility = "hidden";
        expand_button.style.visibility = "visible";
        message_read = $("#messages li").length;
        if (!offline) {
          expand_button.style.backgroundColor = "#007bff";
          expand_button.innerText = "Chat (" + user_count + " Online)";
        }
      }

      //Make the DIV element draggagle:
      var elmnt = document.getElementById("float-chatbox");

      dragElement();
      function dragElement() {
        var pos1 = 0,
          pos2 = 0,
          pos3 = 0,
          pos4 = 0;
        if (document.getElementById("chatbox-header")) {
          document.getElementById("chatbox-header").onmousedown = dragMouseDown;
        }
        // if (expand_button) {
        //   expand_button.onmousedown = dragMouseDown;
        // }

        function dragMouseDown(e) {
          e = e || window.event;
          e.preventDefault();
          // get the mouse cursor position at startup:
          pos3 = e.clientX;
          pos4 = e.clientY;
          document.onmouseup = closeDragElement;
          // call a function whenever the cursor moves:
          document.onmousemove = elementDrag;
        }


        function elementDrag(e) {
          e = e || window.event;
          e.preventDefault();
          // calculate the new cursor position:
          pos1 = pos3 - e.clientX;
          pos2 = pos4 - e.clientY;
          pos3 = e.clientX;
          pos4 = e.clientY;
          // set the element's new position:
          var new_top = elmnt.offsetTop - pos2;
          var new_left = elmnt.offsetLeft - pos1;

          elmnt.style.top = new_top + "px";
          elmnt.style.left = new_left + "px";
        }

        function closeDragElement() {
          /* stop moving when mouse button is released:*/
          document.onmouseup = null;
          document.onmousemove = null;
          checkOutOfBound();
        }
      }

      function checkOutOfBound() {
          var top = parseInt(elmnt.style.top, 10);
          var left = parseInt(elmnt.style.left, 10);
          var w = document.body.clientWidth;
          var h = window.innerHeight;

          if (document.body.clientWidth < 640) {
            expand_button.style.left = "50%";
            expand_button.style.transform = "translate(-50%, 0)";
          } else {
            expand_button.style.left = "unset";
            expand_button.style.transform = "unset";
          }
          if (top < 0) {
            elmnt.style.top = "0px";
            elmnt.style.bottom = "unset"
          }
          else if (top + 590 > h) {
            elmnt.style.top = "unset";
            elmnt.style.bottom = "0px"
          }

          if (left < 0) {
            elmnt.style.left = "0px";
            elmnt.style.right = "unset"
          }
          else if (left + 350 > w) {
            elmnt.style.left = "unset";
            elmnt.style.right = "0px"
          }
        }
   
      var message_reactions_voted = {};
      function reactionSelector() {
        var message_div = event.srcElement.parentNode
        var id = parseInt(message_div.id, 10);
        message_div.appendChild(reaction_selector);
        reaction_selector.style.display = "block";
        reaction_selector.scrollIntoView({behavior: "smooth", block: "nearest"});
        message_div.onmouseleave = function() {
          reaction_selector.style.display = "none";
        }
        $('.reaction').unbind("click");
        $('.reaction').click(function () {
          message_div.onmouseleave = "unset";
          reaction_selector.style.display = "none";
          var reaction = event.srcElement.innerText;
          console.log(id ,reaction);
          if (!(id in message_reactions_voted)) {
            message_reactions_voted[id] = {};
            for (var i = 0; i < reactions_options.length; i++) {
              message_reactions_voted[id][reactions_options[i]] = false;
            }
            message_reactions_voted[id][reaction] = true;
          } else {
            console.log(message_reactions_voted[id][reaction]);
            if (message_reactions_voted[id][reaction] == true) {
              return;
            } else {
              message_reactions_voted[id][reaction] = true;
            }
          }
          socket.emit("send reaction", {id: id, reaction: reaction});
        })

      }
      function reactionShortcut() {
        if (offline) {
          return;
        }
        var elemt = event.srcElement;
        var reaction = elemt.innerText.slice(0, 2);
        var id = elemt.parentNode.parentNode.parentNode.id;
        if (message_reactions_voted[id][reaction] == true) {
          elemt.style.backgroundColor = "#6c757d";
          message_reactions_voted[id][reaction] = false;
          socket.emit("send reaction recall", {id: id, reaction: reaction});
        } else {
          elemt.style.backgroundColor = "#007bff";
          message_reactions_voted[id][reaction] = true;
          socket.emit("send reaction", {id: id, reaction: reaction});
        }
      }
    </script>
  </body>
</div>
